{"version":3,"file":"static/js/main.58530dd4c8.js","mappings":"2JAcA,MAAMA,GAAOC,EAAAA,EAAAA,OAAK,IAAM,+BAClBC,GAAQD,EAAAA,EAAAA,OAAK,IAAM,+BAmCzB,MAhCA,WACE,OACE,2BACI,0BAAI,OAEJ,gBAAC,IAAM,CAACE,KAAK,WAAU,UAEvB,0BACI,0BACI,gBAAC,KAAI,CAACC,GAAG,SAAQ,SAErB,0BACI,gBAAC,KAAI,CAACA,GAAG,UAAS,WAS1B,gBAAC,EAAAC,SAAQ,CAACC,SAAU,2BAAK,eACrB,gBAAC,KAAM,KACH,gBAAC,KAAK,CAACC,KAAK,QAAQC,QAAS,gBAACR,EAAI,QAClC,gBAAC,KAAK,CAACO,KAAK,SAASC,QAAS,gBAACN,EAAK,UAKpD,E,OChCaO,EAAAA,WAAoBC,SAASC,eAAe,QAGpDC,OAED,gBAAC,KAAa,KACV,gBAAC,EAAG,O","sources":["webpack://react-cli/./src/App.jsx","webpack://react-cli/./src/main.js"],"sourcesContent":["import React from \"react\";\r\nimport { lazy, Suspense } from \"react\"; // 路由懒加载：当我们访问某个路由的时候，才去加载对应的组件，这样可以提高性能\r\n// 路由懒加载可以体现在splitChunks中：当我们点击Home组件时，它只加载home的相关js，点击About组件时，它只加载about的相关js\r\n\r\nimport { Link, Routes, Route } from \"react-router-dom\"; // 引入路由链接组件\r\n// (我们用的是6.x版本的react-router-dom, 原来的switch组件已经被Routes组件替代，要生成多个Route就要用Routes包裹它们)\r\n\r\n// 引入一个Antd的Button组件\r\nimport { Button } from \"antd\";\r\n\r\n// import Home from \"./pages/Home\";\r\n// import About from \"./pages/About\";\r\n// lazy函数：用来实现路由懒加载，它接收一个函数作为参数，这个函数返回一个Promise对象，这个Promise对象的结果是一个组件\r\n// lazy函数用于定义路由懒加载的组件\r\nconst Home = lazy(() => import(/* webpackChunkName: 'home' */ \"./pages/Home\")); // 路由懒加载，webpackChunkName是用来给打包后的js文件的模板名字\r\nconst About = lazy(() => import(/* webpackChunkName: 'about' */ \"./pages/About\")); // 路由懒加载\r\n\r\n// 定义一个App函数，返回我们要渲染的内容\r\nfunction App() {\r\n  return (\r\n    <div>\r\n        <h1>App</h1>\r\n        {/* Antd的Button组件 */}\r\n        <Button type=\"primary\">Button</Button>\r\n        {/* 做一个导航 */}\r\n        <ul>\r\n            <li>\r\n                <Link to=\"/home\">Home</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/about\">About</Link>\r\n            </li>\r\n        </ul>\r\n        {/* 配置路由：加载显示我们的组件 */}\r\n        {/* React Router 6.x的版本中：\r\n        Routes组件是用来包裹Route组件的\r\n        Route组件是用来配置路由的，它有两个属性：path和element，path是路由的路径，element是要显示的组件\r\n        原来的版本中element是component，现在已经被替换了 */}\r\n        {/* Suspense用于显示加载中的内容 */}\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n            <Routes>\r\n                <Route path=\"/home\" element={<Home />} />\r\n                <Route path=\"/about\" element={<About />} />\r\n            </Routes>\r\n        </Suspense>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 导出App函数\r\nexport default App;\r\n","// 引入 React 并引入 ReactDOM 来进行渲染\r\nimport React from \"react\"; \r\nimport ReactDOM from \"react-dom/client\";\r\n\r\n// 引入前端路由\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\n// 引入 App 组件\r\nimport App from \"./App\";\r\n\r\n// 引入AntD的所有样式文件\r\nimport \"antd/dist/antd.less\";\r\n\r\n// createRoot是react 18新的渲染方式\r\n// app就是我们要渲染找到的根节点 \r\nconst root = ReactDOM.createRoot(document.getElementById(\"app\")); \r\n\r\n// 通过root.render来渲染我们的App组件\r\nroot.render(\r\n    // 前端路由必须要被包裹在BrowserRouter中，才能得到解析\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n);"],"names":["Home","lazy","About","type","to","Suspense","fallback","path","element","ReactDOM","document","getElementById","render"],"sourceRoot":""}